API - application programming interface - программный интерфейс приложения;
GUI - graphic user interface - графический интерфейс пользователя;
CLI - command line interface - интерфейс командной строки.

По сути API - набор возможностей и методов/функций, которые программа предоставляет для работы с ней.
Тестирование API - тестирование бизнес процессов, поведения системы через определенный набор методов/функций, которые описаны в документации.

Список действий и операций для работы с API перечислен в контракте/спецификации. Для REST - WADL, для SOAP - WSDL.
Один из примеров ведения такой документации - swagger.
Swagger — это инструмент, который помогает разработчикам создавать, документировать и проверять API.

Протокол (HTTP, HTTPS и т.д.) - это набор правил, по которым передаются данные.
В зависимости от способа передачи формата передаваемых данных делятся на 7 типов, регламетировано в моделях OSI.
https://www.learnqa.ru/tpost/9rgayjrhrk-pro-model-osi-bistro-i-prosto

HTTP hypertext transfer protocol - протокол передачи гипертекста - протокол прикладного типа.

HTTP-запрос состоит из:
* URL
* Header - заголовок
* Body - тело (опционально, может и не быть)

HTTP-ответ состоит из:
* Код ответа
* Заголовки
* Тело

GET https://api.nasa.gov/planetary/apod - URL
    * www - world wide web
    * https - протокол
    * api.nasa.gov - доменное имя хоста, может просто быть ip.
    * после имя хоста идет порт. Если по дефолту, то не указывается и идет для https 443, а для http 80. Если отличается от дефолта, то указывается явно :7607.
    * /planetary/apod - URI - если такой URI описан в HTTP API, то можно называть endpoint

В консоли браузера вкладка network, выбрать XHR - запросы от клиента к серверу для получения информации, которую в дальнейшем может отрисовать на UI.
========================================================================================================================


========== XML =========================================================================================================
* XML - Extensible Markup Language - текстовый формат, который содержит теги, атрибуты и значения.
    <req>                               ==корневой тег/элемент==
        <query>Иванов Иван</query>      ==query - название тега/элемента, Иванов Иван - значение тега/элемента==
        <count>7</count>
    </req>

У элемента могут быть атрибуты — один или несколько.
    <party type="PHYSICAL" sourceSystem="AL" rawId="2">     ==У элемента/тега party есть 3 атрибута==
        <field name=“name">Олег </field>                    ==Внутри party есть элементы/теги field, у которых есть атрибут name==
        <field name="birthdate">02.01.1980</field>          ==Значения атрибутов name: name, birthday.==
        <attribute type="PHONE" rawId="AL.2.PH.1">          ==Таким образом: значение элемента/тега field с атрибутом name со значением атрибута "name" равно Олег==
            <field name="type">MOBILE</field>
            <field name="number">+7 916 1234567</field>
        </attribute>
    </party>
========================================================================================================================


========== JSON ========================================================================================================
JSON - JavaScript Object Notation - это легковесный формат для передачи данных, основанный на синтаксисе объектов JavaScript
Данные в виде пар ключа и значения, где имя - это строка, а значение может быть:
    * Cтрокой: "name":"user"
    * Числом: "age":30
    * Логическим значением: "married":true
    * Массивом: "interests":["programming","testing,"cats"]
    * null: "driver_licence":null
    * Объектом: "person":{"name":"user","age":30,"married":true,"interests":["programming","testing,"cats"],"driver_licence":null}
========================================================================================================================


========== REST representational state transfer/передача состояния представления =======================================
     -  использует json, но можно и другие (xml и т.д.);
     -  зависит от транспортного протокола HTTP и базируется на нем;
     - В архитектуре REST отсутствие сохранения состояния относится к методу связи, при котором сервер выполняет каждый клиентский запрос независимо от всех предыдущих запросов.
     - Клиенты могут запрашивать ресурсы в любом порядке, и каждый запрос либо изолирован от других запросов, либо его состояние не сохраняется.
       Это конструктивное ограничение REST API подразумевает, что сервер может каждый раз полностью понять и выполнить запрос.
     - Общедоступные API предъявляют более низкие требования к безопасности и требуют большей гибкости, благодаря чему с ними может взаимодействовать любой желающий.
       Поэтому REST – лучший выбор при создании общедоступных API.
========================================================================================================================


========== SOAP ========================================================================================================
      - использует xml;
      - не зависит от транспортного протокола: HTTP, SMTP, TCP, JMS;
      - обязательно нужны заголовок и тело;
      - не кешируется на сервере
      - более сложные стандарты и используется для специфических приложений, например, для платежных и банковских систем.
      - Более жесткие стандарты безопасности.
      - Соответствие требованиям ACID (atomicity - атомарность, consistency - согласованность, isolation - изоляция, durability - надежность) — набор требований,
        которые обеспечивают сохранность ваших данных. Что особенно важно для финансовых операций.
        Мы же не хотим остаться без денег из-за разрыва соединения или ошибки в ПО, не так ли?
========================================================================================================================


========== Cookie ======================================================================================================
  Имеют срок годности, после истечения автоматически удаляются.

  Cookie - небольшой фрагмент данных, отправленный веб-сервером и хранимый в браузере пользователя.
       Веб-клиент (браузер) каждый раз пересылает этот фрагмент веб-серверу в составе http запроса.
       Чаще всего используется для хранения сессии, настроек предпочтений, статистики и т.д.
========================================================================================================================


========== HTTP requests ===============================================================================================
    У GET нет тела запроса. Легче по трафику и работают быстрее, но менее безопасные.

     * Идемпотентная операция в информатике — действие, многократное повторение которого эквивалентно однократному.
       Корректно реализованные методы GET, HEAD, PUT и DELETE идемпотентны, но не методы POST/PATCH.

       Например, POST будет создавать новый ресурс каждый раз при одном и том же вызове. Т.е. есть задать для вызова директорию /project/, то в ней и будут создаваться файлы.
       Для запросов PUT клиент должен знать точный URI (Uniform Resource Identifier) ресурса. Т.е. /project/filename.
       PUT используется для генерации с точно известным URI или для обновления ресурса, но только с полной заменой. Это означает, что мы не можем делать частичные обновления.

       PATCH используется для частичного изменения ресурса.
       PATCH, подобно POST, может также влиять на ресурсы, отличные от того, который указан в URI запроса.
       PATCH не является ни безопасным, ни идемпотентным. Например, многократные (частичные) запросы на обновление могут добавлять товар несколько раз в корзину.

       Также все безопасные методы (безопасный метод проводит операции "только чтение" (read-only), например: GET, HEAD или OPTIONS) являются идемпотентными.
       По спецификации, сервер должен возвращать идентичные ответы на идентичные GET-запросы (при условии, что ресурс не изменился).
       Это позволяет корректно кэшировать эти ответы, снижая нагрузку на сеть.
========================================================================================================================


========== Status codes ================================================================================================
    /** Status codes - https://developer.mozilla.org/ru/docs/Web/HTTP/Status
     * Информационные ответы (100 – 199)
     * Успешные ответы (200 – 299)
     * Сообщения о перенаправлении (300 – 399)
     * Ошибки клиента (400 – 499)
     * Ошибки сервера (500 – 599)
     */
========================================================================================================================


    /** Что тестируется?
     * Заголовок Header
        * Заголовки из документации работают (в целом)
        * А если какой-то не передать? (обязательность)
        * А если передать, но неправильно? (текст ошибки)
        * Позитивные тесты по доке
        * Регистронезависимость заголовков

     * Тело запроса (body)
        * Правильное тело (пример)
        * Различные параметры (обязательность, работа параметров)
        * Бизнес-логика (Допустимые для продукта данные согласно бизнес требованиям)
        * Ошибки: бизнес-логика (Недопустимые - ошибочные)
        * Перестановка мест слагаемых
        * Регистрозависимость
        * Ошибки: не well formed xml / json
     */